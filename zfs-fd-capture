#!/bin/bash
#
# Author: PB and Claude
# Date: 2025-07-18
# License: (c) HRDAG, 2025, GPL-2 or newer
#
# ------
# zfs-fd/zfs-fd-capture

# Usage: zfs-fd-capture [mount-base]
# 
# Performs fast file metadata capture using fd + stat
# Writes results to filelist.txt

set -euo pipefail

# Source the latest environment file
env_file=$(ls -t /var/lib/zfs-fd/*/environment.sh 2>/dev/null | head -n1)
if [[ -f "$env_file" ]]; then
    source "$env_file"
else
    echo "ERROR: No environment file found" >&2
    echo "Please run zfs-fd-snapshot and zfs-fd-mount first" >&2
    exit 1
fi

# Parse command line arguments
MOUNT_BASE=""

while [[ $# -gt 0 ]]; do
    case $1 in
        --help)
            echo "Usage: $0 [mount-base]"
            echo "Captures file metadata using fd + stat"
            exit 0
            ;;
        *)
            if [[ -z "$MOUNT_BASE" ]]; then
                MOUNT_BASE="$1"
            else
                echo "ERROR: Unknown argument: $1" >&2
                exit 1
            fi
            shift
            ;;
    esac
done

# Use environment variables if not provided
MOUNT_BASE="${MOUNT_BASE:-$ZFS_FD_MOUNT_BASE}"

# Validate required parameters
if [[ -z "$MOUNT_BASE" ]]; then
    echo "ERROR: No mount base specified" >&2
    echo "Either set ZFS_FD_MOUNT_BASE or provide as argument:" >&2
    echo "  zfs-fd-capture <mount-base>" >&2
    echo "  (or run zfs-fd-snapshot and zfs-fd-mount first)" >&2
    echo ""
    echo "Hint: Run the scripts in order:"
    echo "  1. zfs-fd-snapshot  2. zfs-fd-mount  3. zfs-fd-capture  4. zfs-fd-process"
    exit 1
fi

if [[ ! -d "$MOUNT_BASE" ]]; then
    echo "ERROR: Mount base directory not found: $MOUNT_BASE" >&2
    exit 1
fi

# Set up logging
LOG_FILE="${ZFS_FD_LOG_FILE:-/var/log/zfs-fd/capture.log}"
RESULTS_DIR="${ZFS_FD_RESULTS_DIR:-/tmp/zfs-fd-results}"

# Create results directory if it doesn't exist
sudo mkdir -p "$RESULTS_DIR"

# Logging function
log() {
    echo "$(date -Iseconds) [zfs-fd-capture] $1" | sudo tee -a "$LOG_FILE"
}

# Start capture process
log "Starting fast file metadata capture using fd + stat"
log "Mount base: $MOUNT_BASE"
log "Results directory: $RESULTS_DIR"

# Record capture start time
ZFS_FD_WORKFLOW_CAPTURE_START=$(date -Iseconds)
jq --arg start_time "$ZFS_FD_WORKFLOW_CAPTURE_START" \
   ".analysis.capture_start_time = \$start_time" \
   "${ZFS_FD_RESULTS_DIR}/metadata.json" > "${ZFS_FD_RESULTS_DIR}/metadata.json.tmp"
mv "${ZFS_FD_RESULTS_DIR}/metadata.json.tmp" "${ZFS_FD_RESULTS_DIR}/metadata.json"

log "Capture started at: $ZFS_FD_WORKFLOW_CAPTURE_START"

echo "üìã Starting fast file metadata capture..."
echo "üìÅ Mount base: $MOUNT_BASE"
echo "üíæ Results: $RESULTS_DIR"

# Create filelist output
FILELIST_FILE="$RESULTS_DIR/filelist.txt"

log "Capturing file metadata to $FILELIST_FILE"
echo "üìã Capturing file metadata..."

# Use --no-ignore to include files normally ignored by .gitignore
# Use --hidden to include hidden files (starting with .)
# Use sudo to ensure access to all directories regardless of permissions
# Use --no-ignore to include files normally ignored by .gitignore
# Use --hidden to include hidden files (starting with .)
# Run the capture command
sudo fdfind --type f --no-ignore --hidden . "$MOUNT_BASE" --exec-batch stat --format='%s %n' > "$FILELIST_FILE"

# Get file count and log success
FILE_COUNT=$(wc -l < "$FILELIST_FILE")
log "Capture complete: $FILE_COUNT files processed"

# Record capture end time
ZFS_FD_WORKFLOW_CAPTURE_END=$(date -Iseconds)
jq --arg end_time "$ZFS_FD_WORKFLOW_CAPTURE_END" \
   ".analysis.capture_end_time = \$end_time" \
   "${ZFS_FD_RESULTS_DIR}/metadata.json" > "${ZFS_FD_RESULTS_DIR}/metadata.json.tmp"
mv "${ZFS_FD_RESULTS_DIR}/metadata.json.tmp" "${ZFS_FD_RESULTS_DIR}/metadata.json"

log "Capture completed at: $ZFS_FD_WORKFLOW_CAPTURE_END"

echo "‚úÖ Capture complete!"
echo "üìä Files processed: $FILE_COUNT"
echo "üìÑ Results file: $FILELIST_FILE"
echo "‚ñ∂Ô∏è  Next step: zfs-fd-process --input $FILELIST_FILE --output analysis.json --base-path $MOUNT_BASE"
