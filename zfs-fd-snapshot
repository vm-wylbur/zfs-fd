#!/bin/bash
# Standalone snapshot worker
set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CLONE_BASE=""
SNAPSHOT_TAG=""
SOURCE=""
RUN_ID=""

# --- Argument Parsing ---
while [[ $# -gt 0 ]]; do
  case $1 in
    --clone-base)
      CLONE_BASE="$2"; shift; shift ;;
    --snapshot-tag)
      SNAPSHOT_TAG="$2"; shift; shift ;;
    --source)
      SOURCE="$2"; shift; shift ;;
    --run-id)
      RUN_ID="$2"; shift; shift ;;
    *)
      echo "Usage: $0 --source <pool/fs> --clone-base <pool/fs> --snapshot-tag <tag> [--run-id <id>]" >&2
      exit 1 ;;
  esac
done

if [ -z "$SOURCE" ] || [ -z "$CLONE_BASE" ] || [ -z "$SNAPSHOT_TAG" ]; then
    echo "Error: All required arguments are not provided." >&2
    exit 1
fi

log() { echo "[$(date -Iseconds)] [zfs-fd-snapshot] $1" >&2; }

log "Creating recursive snapshot: $SOURCE@$SNAPSHOT_TAG"
zfs snapshot -r "$SOURCE@$SNAPSHOT_TAG"
log "Applying safety hold: du_analysis_hold"
zfs hold du_analysis_hold "$SOURCE@$SNAPSHOT_TAG"

log "Cloning snapshot to $CLONE_BASE"
"$SCRIPT_DIR/zfsrclone" --yes "$SOURCE@$SNAPSHOT_TAG" "$CLONE_BASE"

# The controller creates the results dir, we just need to know where it is
results_dir=$(dirname "$(ls -t /var/lib/zfs-fd/*/environment.sh | head -n1)")
if [ -d "$results_dir" ]; then
    log "Adding run-id to metadata."
    jq --arg run_id "${RUN_ID:-}" '.analysis.run_id = $run_id' "$results_dir/metadata.json" > "$results_dir/metadata.json.tmp" && mv "$results_dir/metadata.json.tmp" "$results_dir/metadata.json"
fi

log "âœ… Snapshot and clone process complete."

