#!/bin/bash

# ZFS-FD Validation Script
# Validates capture completeness including checks for gitignore patterns

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='033[0;34m'
NC='\033[0m' # No Color

ZFS_FD_MOUNT_BASE="/storage/tmp/zfs-fd-analysis"
ZFS_FD_RESULTS_DIR="/var/lib/zfs-fd/2025-07-18T12:00:11-07:00"

echo "üîç ZFS-FD Capture Validation"
echo "============================"
echo
echo "Mount base: $ZFS_FD_MOUNT_BASE"
echo "Results directory: $ZFS_FD_RESULTS_DIR"
echo

if [[ ! -f "$ZFS_FD_RESULTS_DIR/filelist.txt" ]]; then
    echo -e "${RED}Error: Capture file not found${NC}"
    exit 1
fi

if [[ ! -d "$ZFS_FD_MOUNT_BASE" ]]; then
    echo -e "${RED}Error: Mount base directory not found${NC}"
    exit 1
fi

total_captured_files=$(wc -l < "$ZFS_FD_RESULTS_DIR/filelist.txt")
echo "Total captured files: $total_captured_files"
echo

echo "üìÅ Sample Directory Validation"
echo "=============================="
echo

check_directory() {
    local dir="$1"
    local relative_path="${dir#$ZFS_FD_MOUNT_BASE/}"
    
    if [[ -d "$dir" ]]; then
        actual_count=$(sudo find "$dir" -type f 2>/dev/null | wc -l)
        captured_count=$(grep -c "^[0-9]* ${dir}/" "$ZFS_FD_RESULTS_DIR/filelist.txt" 2>/dev/null || echo "0")
        
        if [[ $actual_count -gt 0 ]]; then
            percent=$((captured_count * 100 / actual_count))
        else
            percent=0
        fi
        
        if [[ $captured_count -eq $actual_count ]]; then
            echo -e "  ${GREEN}‚úì${NC} $relative_path: ${GREEN}$captured_count/$actual_count files (100%)${NC}"
        elif [[ $percent -ge 90 ]]; then
            echo -e "  ${YELLOW}!${NC} $relative_path: ${YELLOW}$captured_count/$actual_count files ($percent%)${NC}"
        else
            echo -e "  ${RED}‚úó${NC} $relative_path: ${RED}$captured_count/$actual_count files ($percent%)${NC}"
        fi
    else
        echo -e "  ${BLUE}-${NC} $relative_path: Directory not found"
    fi
}

sample_dirs=(
    "$ZFS_FD_MOUNT_BASE/home/pball/projects/scottools"
    "$ZFS_FD_MOUNT_BASE/home/pball/projects/claude-mem"
    "$ZFS_FD_MOUNT_BASE/home/pball/.config"
    "$ZFS_FD_MOUNT_BASE/critical-filesystems/etc"
    "$ZFS_FD_MOUNT_BASE/critical-filesystems/usr/local/bin"
)

for dir in "${sample_dirs[@]}"; do
    check_directory "$dir"
done

# Add .gitignore analysis and final assessment sections if needed


echo
echo "üìä .gitignore Pattern Analysis"
echo "=============================="
echo "Checking for common .gitignore patterns that might affect capture..."
echo

# Find .gitignore files with stricter limits
echo "Searching for .gitignore files (limited depth)..."
gitignore_count=$(timeout 5s find "$ZFS_FD_MOUNT_BASE/home" -name ".gitignore" -type f -maxdepth 6 2>/dev/null | wc -l || echo "0")
echo "Found $gitignore_count .gitignore files in home directories"
echo

# Check for specific patterns with timeouts and limits
echo "Checking for commonly ignored patterns:"
echo

# Check for .ipynb files in home directory only
echo -n "  Checking .ipynb files... "
ipynb_captured=$(grep -c "\.ipynb$" "$ZFS_FD_RESULTS_DIR/filelist.txt" 2>/dev/null || echo "0")
if [[ $ipynb_captured -gt 0 ]]; then
    echo -e "${GREEN}‚úì captured $ipynb_captured files${NC}"
else
    echo -e "${BLUE}none captured${NC}"
fi

# Quick check for node_modules in specific projects
echo -n "  Checking node_modules... "
node_check=$(timeout 5s find "$ZFS_FD_MOUNT_BASE/home/pball/projects" -type d -name "node_modules" -maxdepth 3 2>/dev/null | head -5 | wc -l || echo "0")
if [[ $node_check -gt 0 ]]; then
    node_files_captured=$(grep -c "/node_modules/" "$ZFS_FD_RESULTS_DIR/filelist.txt" 2>/dev/null || echo "0")
    if [[ $node_files_captured -gt 0 ]]; then
        echo -e "${GREEN}‚úì captured $node_files_captured files${NC}"
    else
        echo -e "${YELLOW}found node_modules dirs but no files captured${NC}"
    fi
else
    echo -e "${BLUE}none found in projects${NC}"
fi

# Quick check for .git directories
echo -n "  Checking .git directories... "
git_files_captured=$(grep -c "/\.git/" "$ZFS_FD_RESULTS_DIR/filelist.txt" 2>/dev/null || echo "0")
if [[ $git_files_captured -gt 0 ]]; then
    echo -e "${GREEN}‚úì captured $git_files_captured files${NC}"
else
    echo -e "${YELLOW}no .git files captured${NC}"
fi

echo
echo "üìä Final Assessment"
echo "=================="
echo
echo "Total captured files: $total_captured_files"
echo

# Check if all sample directories matched
all_matched=true
for dir in "${sample_dirs[@]}"; do
    if [[ -d "$dir" ]]; then
        actual=$(sudo find "$dir" -type f 2>/dev/null | wc -l)
        captured=$(grep -c "^[0-9]* ${dir}/" "$ZFS_FD_RESULTS_DIR/filelist.txt" 2>/dev/null || echo "0")
        if [[ $captured -ne $actual ]]; then
            all_matched=false
            break
        fi
    fi
done

if [[ "$all_matched" == "true" ]]; then
    echo -e "${GREEN}‚úì All sampled directories show complete capture${NC}"
    echo "  The capture appears to be comprehensive!"
else
    echo -e "${YELLOW}! Some directories show incomplete capture${NC}"
    echo "  Review the sample directory results above for details"
fi

echo
echo "Note: The capture was run with --no-ignore --hidden flags,"
echo "ensuring all files are included regardless of .gitignore patterns."
echo
echo "Validation complete."
