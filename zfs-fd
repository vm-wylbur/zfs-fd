#!/bin/bash
#
# Main controller. Final explicit-argument version.
#
set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# --- Configuration & Defaults ---
ZFS_FD_BASE_DIR="/var/lib/zfs-fd"
ZFS_FD_CLONE_BASE="deep_chll/tmp/zfs-fd-analysis"
ZFS_FD_SOURCE="deep_chll/backup"
LOCK_FILE="/var/lock/zfs-fd.lock"

# --- Global Variables ---
tmp_dir=""

# --- Logging ---
log() {
    echo "[$(date -Iseconds)] [zfs-fd] $1" >&2
}

# --- Cleanup Trap ---
cleanup_on_exit() {
    if [ -f "$LOCK_FILE" ] && [ "$(cat $LOCK_FILE 2>/dev/null)" == "$$" ]; then
        log "EXIT trap: Releasing lock file."
        rm -f "$LOCK_FILE"
    fi
    if [ -n "$tmp_dir" ] && [ -d "$tmp_dir" ]; then
        log "EXIT trap: Removing temporary directory: $tmp_dir"
        rm -rf "$tmp_dir"
    fi
}

# --- Main Workflow ---
run_complete_workflow() {
    trap cleanup_on_exit EXIT HUP INT QUIT PIPE TERM

    local results_dir="$ZFS_FD_BASE_DIR/$(date +%Y%m%d-%H%M%S)"
    mkdir -p "$results_dir"
    local log_file="$results_dir/zfs-fd-run.log"
    exec > >(tee -a "$log_file") 2>&1

    log "🚀 Starting complete ZFS-FD workflow. Results will be in: $results_dir"

    if [[ $EUID -ne 0 ]]; then log "❌ Error: Must be run with sudo"; exit 1; fi

    log "Attempting to acquire lock: $LOCK_FILE"
    if [ -f "$LOCK_FILE" ]; then log "❌ Error: Lock file found."; exit 1; fi
    echo $$ > "$LOCK_FILE"
    log "✅ Lock acquired."

    tmp_dir=$(mktemp -d)
    log "Working in temporary directory: $tmp_dir"

    log "Running pre-flight cleanup..."
    "$SCRIPT_DIR/zfs-fd-cleanup" --clone-base "$ZFS_FD_CLONE_BASE" --yes
    log "✅ System state is clean."

    local source_fs="${1:-$ZFS_FD_SOURCE}"
    local snapshot_tag="du-holder-$(date +%s)"
    local snapshot_name="$source_fs@$snapshot_tag"

    log "📸 Step 1/5: Creating snapshot ($snapshot_name)..."
    "$SCRIPT_DIR/zfs-fd-snapshot" --source "$source_fs" --clone-base "$ZFS_FD_CLONE_BASE" --snapshot-tag "$snapshot_tag"
    
    log "🔌 Step 2/5: Mounting clones..."
    local mount_base=$("$SCRIPT_DIR/zfs-fd-mount" --clone-base "$ZFS_FD_CLONE_BASE")
    log "✅ Mount point: $mount_base"

    log "📊 Step 3/5: Capturing file metadata..."
    local filelist_path="$tmp_dir/filelist.txt"
    "$SCRIPT_DIR/zfs-fd-capture" --mount-base "$mount_base" --output "$filelist_path"
    log "✅ Capture complete."

    log "🧹 Step 4/5: Cleaning up ZFS resources..."
    "$SCRIPT_DIR/zfs-fd-cleanup" --clone-base "$ZFS_FD_CLONE_BASE" --snapshot-tag "$snapshot_name" --yes
    log "✅ ZFS resources are clean."

    rm -f "$LOCK_FILE"
    log "✅ Lock released."

    log "🔍 Step 5/5: Processing captured data..."
    local awk_output_path="$tmp_dir/awk_output.txt"
    "$SCRIPT_DIR/zfs-fd-process" --input "$filelist_path" --base-path "$mount_base" > "$awk_output_path"

    local final_json_path="$results_dir/analysis.json"
    "$SCRIPT_DIR/zfs-fd-postprocess" --input "$awk_output_path" --output "$final_json_path"
    log "✅ Processing complete."
    
    rm -rf "$tmp_dir"
    tmp_dir=""
    
    log "🎉 Workflow finished successfully!"

    trap - EXIT
}

# --- Main Dispatcher ---
COMMAND="${1:-help}"
case "$COMMAND" in
  help|--help|-h|"")
    # No-op for help, will be added later
    ;;
  run)
    shift; run_complete_workflow "$@" ;;
  *)
    if [ -f "$SCRIPT_DIR/zfs-fd-$COMMAND" ]; then
        exec "$SCRIPT_DIR/zfs-fd-$COMMAND" "$@"
    else
        log "Unknown command: $COMMAND"
        exit 1
    fi ;;
esac
