#!/bin/bash
#
# Author: PB and Claude
# Date: 2025-07-18
# License: (c) HRDAG, 2025, GPL-2 or newer
#
# Original: https://gist.github.com/Jauchi/6d334233a880f0d382935632e22dd2ed
# Author: Jauchi (original), PB & Claude (modifications)
# License: GNU Affero General Public License v3+
#
# This program is free software: you can redistribute it and/or modify it 
# under the terms of the GNU Affero General Public License as published by 
# the Free Software Foundation, either version 3 of the License, or 
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT 
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License 
# for more details.
#
# You should have received a copy of the GNU Affero General Public License 
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#
# ------
# zfs-du/zfsrclone

# Usage: zfsrclone [--yes] <source-snapshot> <destination-dataset>
# 
# Safe ZFS dataset cloning utility with hold verification
# Options:
#   --yes    Skip confirmation prompt (for automation)

# Parse command line arguments
SKIP_CONFIRMATION=false
if [[ "$1" == "--yes" ]]; then
    SKIP_CONFIRMATION=true
    shift
fi

if [[ -z "$1" ]]; then
	echo "You did not provide a source snapshot name!"
	exit 1
fi
if [[ -z "$2" ]]; then
        echo "You did not provide a destination dataset name!"
        exit 1
fi

# Verify that the destination dataset does not already exist:
if zfs list -Hp -r -o name "$2" > /dev/null 2>&1 ; then
	echo "Dataset already seems to exist. For your safety, please choose a dataset name that *does not* already exist!"
	exit 1
fi

if ! [[ "$1" =~ @ ]]; then
	echo "Your source dataset does not contain an '@' character. Did you provide a snapshot name?"
	exit 1
fi

# Extract the name of the snapshot and the name of the destination
snapname="${1/*@}"
dsname="${1/@*}"

# Check if snapshot and hold exists for each dataset:
echo "-- STATUS --"
zfs list -Hp -r -o name "$dsname" | while IFS=$'\n' read -r ln; do
	expected_snapname="$ln""@""$snapname"
	echo -n -e "\e[1;34m""$expected_snapname"": "
	# check if the dataset exists or the command fails:
	if ! zfs list -Hp -o name "$expected_snapname" > /dev/null 2>&1; then
		echo "Command 'zfs list -Hp -o name $expected_snapname' failed with error. Refusing to continue (did you create a *recursive* snapshot?"
		echo -e "\e[0m"
		exit 1
	else
		echo -n -e "\e[1;32m[SNAPSHOT EXISTS]"
	fi

	# next, get holds:
	number_of_holds="$(zfs holds -H "$expected_snapname" | wc -l)"
	if [[ "$number_of_holds" -gt 0 ]]; then
		echo -n -e "\e[1;32m [$number_of_holds HOLDS EXIST]"
	else
		echo -n -e "\e[5;31m [NO HOLD FOUND]"
	fi
	echo -e "\e[0m"
done

# Skip confirmation if --yes flag provided
if [[ "$SKIP_CONFIRMATION" == "true" ]]; then
    REPLY="y"
else
    read -p "Begin operation? [y/N] " -n 1 -r
    echo
fi

if [[ $REPLY =~ ^[Yy]$ ]]
then
	zfs list -Hp -r -o name "$dsname" | while IFS=$'\n' read -r ln; do
		expected_snapname="$ln@$snapname"
		dpath="${ln/$dsname}"
		dest_fs="$2""$dpath"

		# If filesystem is a volume, do not attempt to set "canmount" to "noauto".
		fstype="$(zfs list -o type -Hp "$ln")"
		if [[ "$fstype" == "volume" ]]; then
			cloneargs=""
		else
			cloneargs="-o canmount=noauto"
		fi

		echo -n -e "\e[1;34m""$expected_snapname"" -> ""$dest_fs""... "
		# Yes, we intentionally do not put the quotes here, because we want the arguments to be treated as arguments.
		if zfs clone $cloneargs -p "$expected_snapname" "$dest_fs"; then
			echo -e "\e[1;32mdone.\e[0m"
		else		
			echo -e "\e[1;31mfailed. BAILING!\e[0m"
			exit 1
		fi
	done
else
	echo "Aborted operation."
fi
