#!/bin/bash
# AI - Iteration 6: Standalone awk processor
set -euo pipefail

# --- Argument Parsing ---
INPUT_FILE=""
BASE_PATH=""

while [[ $# -gt 0 ]]; do
  case $1 in
    --input)
      INPUT_FILE="$2"
      shift; shift
      ;;
    --base-path)
      BASE_PATH="$2"
      shift; shift
      ;;
    *)
      echo "Usage: $0 --input <file> --base-path <path>" >&2
      exit 1
      ;;
  esac
done

if [ ! -f "$INPUT_FILE" ] || [ -z "$BASE_PATH" ]; then
    echo "Usage: $0 --input <file> --base-path <path>" >&2
    exit 1
fi

# --- AWK Processing ---
# This is the same high-performance awk logic as before.
# It is now fed by explicit command-line arguments.
AWK=gawk
if ! command -v $AWK &> /dev/null; then AWK=awk; fi

NUM_CHUNKS=4
lines=$(wc -l < "$INPUT_FILE")
chunk_size=$((lines / NUM_CHUNKS + 1))

# Create temporary files in a safe, isolated directory
WORK_DIR=$(mktemp -d)
trap 'rm -rf -- "$WORK_DIR"' EXIT

split -l $chunk_size --numeric-suffixes=1 "$INPUT_FILE" "$WORK_DIR/part."

for f in "$WORK_DIR"/part.*; do
    $AWK -v base_path="$BASE_PATH" -v max_depth=3 ' 
    BEGIN {
        base_path_len = length(base_path)
        OFS = "\t"
    }
    {
        size = $1
        match($0, / [^ ]+ /)
        path = substr($0, RSTART + RLENGTH)
        if (substr(path, 1, base_path_len) != base_path) next
        
        rel_path = substr(path, base_path_len + 1)
        if (rel_path == "") next
        
        n = split(rel_path, components, "/")
        agg_level = (n - 1 < 3) ? (n - 1) : 3
        
        if (agg_level > 0) {
            dir_key = components[1]
            for (i = 2; i <= agg_level; i++) { dir_key = dir_key "/" components[i] }
            print dir_key, size, 1
        }
    }' "$f" > "$f.out" &
done

wait

$AWK 'BEGIN { FS = OFS = "\t" } { s[$1]+=$2; c[$1]+=$3 } END { for (p in s) print s[p], c[p], p }' "$WORK_DIR"/*.out | sort -k1 -rn

