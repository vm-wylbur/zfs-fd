#!/bin/bash
# Standalone cleanup worker
set -euo pipefail

CLONE_BASE=""
SNAPSHOT_TAG=""
SKIP_CONFIRMATION=false

while [[ $# -gt 0 ]]; do
  case $1 in
    --clone-base) CLONE_BASE="$2"; shift; shift ;;
    --snapshot-tag) SNAPSHOT_TAG="$2"; shift; shift ;;
    --yes) SKIP_CONFIRMATION=true; shift ;;
    *) echo "Usage: $0 --clone-base <path> [--snapshot-tag <tag>] [--yes]"; exit 1;;
  esac
done

if [ -z "$CLONE_BASE" ]; then echo "Error: --clone-base is required." >&2; exit 1; fi

log() { echo "[$(date -Iseconds)] [zfs-fd-cleanup] $1" >&2; }

# --- Clone Destruction ---
if zfs list -H -o name "$CLONE_BASE" >/dev/null 2>&1; then
    log "Destroying clone: $CLONE_BASE"
    zfs destroy -rf "$CLONE_BASE"
    log "✅ Clone destroyed."
else
    log "Clone $CLONE_BASE not found. Nothing to do."
fi

# --- Snapshot/Hold Cleanup ---
if [ -n "$SNAPSHOT_TAG" ]; then
    # Surgical mode: only touch the specific tag
    log "Releasing hold and destroying surgical snapshot: $SNAPSHOT_TAG"
    zfs release du_analysis_hold "$SNAPSHOT_TAG" || log "(Hold already released)"
    zfs destroy -r "$SNAPSHOT_TAG"
    log "✅ Surgical cleanup complete."
else
    # Broad mode: find all snapshots with our hold tag and clean them up
    log "Starting broad cleanup of all snapshots with tag 'du_analysis_hold'"
    found=0
    zfs list -t snapshot -H -o name | while IFS= read -r snap; do
        if zfs holds -H "$snap" 2>/dev/null | grep -q "du_analysis_hold"; then
            log "Found and cleaning stale snapshot: $snap"
            zfs release du_analysis_hold "$snap"
            zfs destroy -r "$snap"
            found=$((found + 1))
        fi
    done
    log "✅ Broad cleanup complete. Found and destroyed $found stale snapshots."
fi
